# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pruss')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pruss')
    _pruss = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pruss', [dirname(__file__)])
        except ImportError:
            import _pruss
            return _pruss
        try:
            _mod = imp.load_module('_pruss', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pruss = swig_import_helper()
    del swig_import_helper
else:
    import _pruss
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRU_OFFLINE = _pruss.PRU_OFFLINE
PRU_RUNNING = _pruss.PRU_RUNNING
PRU_HALTED = _pruss.PRU_HALTED
SYSFS_PATH = _pruss.SYSFS_PATH
FW_PATH = _pruss.FW_PATH
RPMSG_PATH = _pruss.RPMSG_PATH
PRU_ICSS = _pruss.PRU_ICSS
PRU_ICSS_LEN = _pruss.PRU_ICSS_LEN
PRU_DRAM0 = _pruss.PRU_DRAM0
PRU_DRAM1 = _pruss.PRU_DRAM1
PRU_SRAM = _pruss.PRU_SRAM
class PRU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PRU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PRU, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pruss.new_PRU(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        modprobe = staticmethod(_pruss.PRU_modprobe)
    else:
        modprobe = _pruss.PRU_modprobe
    if _newclass:
        modunprobe = staticmethod(_pruss.PRU_modunprobe)
    else:
        modunprobe = _pruss.PRU_modunprobe

    def enable(self):
        return _pruss.PRU_enable(self)

    def disable(self):
        return _pruss.PRU_disable(self)

    def reset(self):
        return _pruss.PRU_reset(self)

    def load(self, arg2):
        return _pruss.PRU_load(self, arg2)

    def set_channel(self, arg2):
        return _pruss.PRU_set_channel(self, arg2)

    def get_state(self):
        return _pruss.PRU_get_state(self)

    def send_msg(self, arg2):
        return _pruss.PRU_send_msg(self, arg2)

    def get_msg(self):
        return _pruss.PRU_get_msg(self)

    def wait_for_event(self):
        return _pruss.PRU_wait_for_event(self)

    def mem_writeint(self, arg2, arg3):
        return _pruss.PRU_mem_writeint(self, arg2, arg3)

    def mem_readint(self, arg2):
        return _pruss.PRU_mem_readint(self, arg2)
    __swig_destroy__ = _pruss.delete_PRU
    __del__ = lambda self: None
PRU_swigregister = _pruss.PRU_swigregister
PRU_swigregister(PRU)

def PRU_modprobe():
    return _pruss.PRU_modprobe()
PRU_modprobe = _pruss.PRU_modprobe

def PRU_modunprobe():
    return _pruss.PRU_modunprobe()
PRU_modunprobe = _pruss.PRU_modunprobe

# This file is compatible with both classic and new-style classes.


